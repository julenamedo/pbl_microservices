version: '3.8'

services:
  # Servicios para grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/keys/server_cert.pem
      - GF_SERVER_CERT_KEY=/keys/server_key.pem
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:rw
      - ./grafana/dashboards:/var/lib/grafana/dashboards:rw
      - ./grafana/notifiers:/etc/grafana/notifiers:rw
      - ./keys:/keys
      - ./grafana_data:/var/lib/grafana
    depends_on:
      - loki
    restart: always

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./grafana/loki/loki-config.yaml:/etc/loki-local-config.yaml
      - ./loki_data:/tmp/loki
      - ./keys:/keys
    command: -config.file=/etc/loki-local-config.yaml -config.expand-env=true
    restart: always


  # Servicio Consul
  consul:
    image: hashicorp/consul:1.16.0
    container_name: consul
    ports:
      - '8300:8300'
      - '8301:8301'
      - '8301:8301/udp'
      - '8500:${CONSUL_PORT_WEB_UI}'     # Port For Consul Web UI
      - '8600:${CONSUL_PORT_SERVICE}'
      - '8600:8600/udp'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${CONSUL_PORT_WEB_UI}/" ]
      interval: 2s
      timeout: 2s
      retries: 10
    restart: always

  rabbitmq:
    image: rabbitmq:3-management   # Usa la versi贸n con interfaz de administraci贸n
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT_WEB_UI}:${RABBITMQ_PORT_WEB_UI}"
      - "${RABBITMQ_PORT_SERVICE}:${RABBITMQ_PORT_SERVICE}"

    volumes:
      - './keys:/etc/ssl/certs'   # Monta el directorio con los certificados
      - './rabbitmq:/etc/rabbitmq' # Configuraci贸n personalizada de RabbitMQ# Puerto para la interfaz de administraci贸n
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always

  machine_a1:
    build: ./machine_a1/fastapi_app/.
    ports:
      - '${MACHINE_A1_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_a1/fastapi_app:/code'
      - './machine_a1/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_A1_AWS_PORT}
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  machine_a2:
    build: ./machine_a2/fastapi_app/.
    ports:
      - '${MACHINE_A2_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_a2/fastapi_app:/code'
      - './machine_a2/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_A2_AWS_PORT}
    restart: on-failure

  machine_b1:
    build: ./machine_b1/fastapi_app/.
    ports:
      - '${MACHINE_B1_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_b1/fastapi_app:/code'
      - './machine_b1/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_B1_AWS_PORT}
    restart: on-failure

  machine_b2:
    build: ./machine_b2/fastapi_app/.
    ports:
      - '${MACHINE_B2_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_b2/fastapi_app:/code'
      - './machine_b2/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_B2_AWS_PORT}
    restart: on-failure

  orders:
    build: ./orders/fastapi_app/.
    ports:
      - '${ORDER_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './orders/fastapi_app:/code'
      - './orders/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${ORDER_AWS_PORT}
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  delivery:
    build: ./delivery/fastapi_app/.
    ports:
      - '${DELIVERY_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './delivery/fastapi_app:/code'
      - './delivery/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${DELIVERY_AWS_PORT}
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  client:
    build: ./client/fastapi_app/.
    ports:
      - '${CLIENT_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './client/fastapi_app:/code'
      - './client/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      #CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      SERVICE_PORT: ${CLIENT_AWS_PORT}
      UVICORN_PORT: ${UVICORN_PORT}
    restart: on-failure
    #command: >
      #sh -c "sqlite3 /volume/monolithic.db < /volume/init_db.sql &&
             #uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem"

  payment:
    build: ./payment/fastapi_app/.
    ports:
      - '${PAYMENT_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './payment/fastapi_app:/code'
      - './payment/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${PAYMENT_AWS_PORT}
    restart: on-failure
    #command: sh -c "sqlite3 /volume/monolithic.db < /volume/init_db.sql &&
             #uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem"

  warehouse:
    build: ./warehouse/fastapi_app/.
    ports:
      - '${WAREHOUSE_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './warehouse/fastapi_app:/code'
      - './warehouse/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${WAREHOUSE_AWS_PORT}
    restart: on-failure

  log:
    build: ./log/fastapi_app/.
    ports:
      - '${LOG_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './log/fastapi_app:/code'
      - './log/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      INFLUXDB_URL: "https://influxdb:8086"
      INFLUXDB_TOKEN: "admin's Token"
      INFLUXDB_ORG: "your-org"
      INFLUXDB_BUCKET: "your-bucket"
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${LOG_AWS_PORT}
    restart: on-failure
    # command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --ssl-keyfile /keys/server_key.pem --ssl-certfile /keys/server_cert.pem

  influxdb:
    image: influxdb
    container_name: influxdb
    ports:
      - "8086:8086"  # HTTPS
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORGANIZATION}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
    volumes:
      - ./influxdb_data:/var/lib/influxdb2
      - ./keys:/keys
    command: >
      influxd
      --tls-cert=/keys/server_cert.pem
      --tls-key=/keys/server_key.pem

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    depends_on:
      - influxdb
      - consul
    volumes:
      - ./grafana/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ./keys/ca_cert.pem:/etc/telegraf/ca_cert.pem:ro  # Mount CA certificate
      - ./keys/server_cert.pem:/etc/telegraf/server_cert.pem:ro  # Mount CA certificate
      - ./keys/server_key.pem:/etc/telegraf/server_key.pem:ro  # Mount CA certificate
    environment:
      - CONSUL_IP=${CONSUL_HOST}
      - CONSUL_WEB_UI_PORT=${CONSUL_PORT_WEB_UI}
      - CONSUL_TOKEN=${CONSUL_TOKEN}
      - HAPROXY_HOST=${HAPROXY_HOST}
      - HAPROXY_STATS_PORT=${HAPROXY_STATS_PORT}
      - RABBITMQ_IP=${RABBITMQ_HOST}
      - RABBITMQ_WEB_UI_PORT=${RABBITMQ_PORT_WEB_UI}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_ORGANIZATION=${INFLUXDB_ORGANIZATION}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_AUTH_TOKEN=${INFLUXDB_AUTH_TOKEN}
    restart: always

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    ports:
      - "${HAPROXY_PORT}:${HAPROXY_PORT}"
      - '${HAPROXY_STATS_PORT}:${HAPROXY_STATS_PORT}'
    environment:
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      HAPROXY_PORT: ${HAPROXY_PORT}
      CONSUL_PORT_SERVICE: ${CONSUL_PORT_SERVICE}
      GRAFANA_PORT: ${GRAFANA_PORT}
    volumes:
      - './haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg'
      - ./haproxy.cfg/503_error.html:/usr/local/etc/haproxy/503_error.html
      - './keys:/keys'
    depends_on:
      - grafana
      - loki
      - telegraf
      - machine_a1
      - machine_a2
      - machine_b1
      - machine_b2
      - warehouse
      - orders
      - delivery
      - client
      - payment
      - log
      - rabbitmq
    env_file:
      - .env