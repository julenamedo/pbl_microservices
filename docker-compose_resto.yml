version: '3.8'

services:
  machine_a1:
    build: ./machine_a1/fastapi_app/.
    ports:
      - '${MACHINE_A1_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_a1/fastapi_app:/code'
      - './machine_a1/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_A1_AWS_PORT}
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  machine_a2:
    build: ./machine_a2/fastapi_app/.
    ports:
      - '${MACHINE_A2_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_a2/fastapi_app:/code'
      - './machine_a2/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_A2_AWS_PORT}
    restart: on-failure

  machine_b1:
    build: ./machine_b1/fastapi_app/.
    ports:
      - '${MACHINE_B1_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_b1/fastapi_app:/code'
      - './machine_b1/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_B1_AWS_PORT}
    restart: on-failure

  machine_b2:
    build: ./machine_b2/fastapi_app/.
    ports:
      - '${MACHINE_B2_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './machine_b2/fastapi_app:/code'
      - './machine_b2/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${MACHINE_B2_AWS_PORT}
    restart: on-failure

  orders:
    build: ./orders/fastapi_app/.
    ports:
      - '${ORDER_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './orders/fastapi_app:/code'
      - './orders/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${ORDER_AWS_PORT}
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  delivery:
    build: ./delivery/fastapi_app/.
    ports:
      - '${DELIVERY_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './delivery/fastapi_app:/code'
      - './delivery/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${DELIVERY_AWS_PORT}
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  client:
    build: ./client/fastapi_app/.
    ports:
      - '${CLIENT_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './client/fastapi_app:/code'
      - './client/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      #CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      SERVICE_PORT: ${CLIENT_AWS_PORT}
      UVICORN_PORT: ${UVICORN_PORT}
    restart: on-failure
    #command: >
      #sh -c "sqlite3 /volume/monolithic.db < /volume/init_db.sql &&
             #uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem"

  payment:
    build: ./payment/fastapi_app/.
    ports:
      - '${PAYMENT_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './payment/fastapi_app:/code'
      - './payment/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${PAYMENT_AWS_PORT}
    restart: on-failure
    #command: sh -c "sqlite3 /volume/monolithic.db < /volume/init_db.sql &&
             #uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem"

  warehouse:
    build: ./warehouse/fastapi_app/.
    ports:
      - '${WAREHOUSE_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './warehouse/fastapi_app:/code'
      - './warehouse/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${WAREHOUSE_AWS_PORT}
    restart: on-failure

  log:
    build: ./log/fastapi_app/.
    ports:
      - '${LOG_AWS_PORT}:${UVICORN_PORT}'
    volumes:
      - './log/fastapi_app:/code'
      - './log/db_volume:/volume'
      - './keys:/keys'
    # depends_on:
      # rabbitmq:
        # condition: service_healthy
      # consul:
        # condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      INFLUXDB_URL: "https://influxdb:8086"
      INFLUXDB_TOKEN: "admin's Token"
      INFLUXDB_ORG: "your-org"
      INFLUXDB_BUCKET: "your-bucket"
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      # CONSUL_HOST: consul
      CONSUL_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      RABBITMQ_HOST: ${CONSUL_RABBITMQ_HOST_AWS}
      UVICORN_PORT: ${UVICORN_PORT}
      SERVICE_PORT: ${LOG_AWS_PORT}
    restart: on-failure
    # command: uvicorn app.main:app --host 0.0.0.0 --port ${UVICORN_PORT} --ssl-keyfile /keys/server_key.pem --ssl-certfile /keys/server_cert.pem
