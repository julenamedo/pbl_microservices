version: '3.8'

services:
  # Servicios para grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/keys/server_cert.pem
      - GF_SERVER_CERT_KEY=/keys/server_key.pem
    volumes:
      - ./keys:/keys
      - ./grafana_data:/var/lib/grafana
    depends_on:
      - loki
    restart: always

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./grafana/loki/loki-config.yaml:/etc/loki-local-config.yaml
      - ./loki_data:/tmp/loki
      - ./keys:/keys
    command: -config.file=/etc/loki-local-config.yaml -config.expand-env=true
    restart: always


  # Servicio Consul
  consul:
    image: hashicorp/consul:1.16.0
    container_name: consul
    ports:
      - '8300:8300'
      - '8301:8301'
      - '8301:8301/udp'
      - '8500:8500'     # Port For Consul Web UI
      - '8600:8600'
      - '8600:8600/udp'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/" ]
      interval: 2s
      timeout: 2s
      retries: 10
    restart: always

  rabbitmq:
    image: rabbitmq:3-management   # Usa la versión con interfaz de administración
    container_name: rabbitmq
    ports:
      - "5671:5671"                # Puerto para la comunicación entre los servicios
      - "15672:15672"
      - "15671:15671"

    volumes:
      - './keys:/etc/ssl/certs'   # Monta el directorio con los certificados
      - './rabbitmq:/etc/rabbitmq' # Configuración personalizada de RabbitMQ# Puerto para la interfaz de administración
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always

  machine_a1:
    build: ./machine_a1/fastapi_app/.
    ports:
      - '8001:8000'
    volumes:
      - './machine_a1/fastapi_app:/code'
      - './machine_a1/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  machine_a2:
    build: ./machine_a2/fastapi_app/.
    ports:
      - '8007:8000'
    volumes:
      - './machine_a2/fastapi_app:/code'
      - './machine_a2/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure

  machine_b1:
    build: ./machine_b1/fastapi_app/.
    ports:
      - '8008:8000'
    volumes:
      - './machine_b1/fastapi_app:/code'
      - './machine_b1/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure

  machine_b2:
    build: ./machine_b2/fastapi_app/.
    ports:
      - '8010:8000'
    volumes:
      - './machine_b2/fastapi_app:/code'
      - './machine_b2/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure

  orders:
    build: ./orders/fastapi_app/.
    ports:
      - '8002:8000'
    volumes:
      - './orders/fastapi_app:/code'
      - './orders/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  delivery:
    build: ./delivery/fastapi_app/.
    ports:
      - '8003:8000'
    volumes:
      - './delivery/fastapi_app:/code'
      - './delivery/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure
    #command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem

  client:
    build: ./client/fastapi_app/.
    ports:
      - '8004:8000'
    volumes:
      - './client/fastapi_app:/code'
      - './client/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure
    #command: >
      #sh -c "sqlite3 /volume/monolithic.db < /volume/init_db.sql &&
             #uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem"

  payment:
    build: ./payment/fastapi_app/.
    ports:
      - '8005:8000'
    volumes:
      - './payment/fastapi_app:/code'
      - './payment/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure
    #command: sh -c "sqlite3 /volume/monolithic.db < /volume/init_db.sql &&
             #uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --ssl-keyfile /keys/priv.pem --ssl-certfile /keys/cert.pem"

  warehouse:
    build: ./warehouse/fastapi_app/.
    ports:
      - '8006:8000'
    volumes:
      - './warehouse/fastapi_app:/code'
      - './warehouse/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure

  log:
    build: ./log/fastapi_app/.
    ports:
      - '8009:8000'
    volumes:
      - './log/fastapi_app:/code'
      - './log/db_volume:/volume'
      - './keys:/keys'
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      INFLUXDB_URL: "https://influxdb:8086"
      INFLUXDB_TOKEN: "admin's Token"
      INFLUXDB_ORG: "your-org"
      INFLUXDB_BUCKET: "your-bucket"
      SQLALCHEMY_DATABASE_URL: ${SQLALCHEMY_SQLITE_DATABASE_URI}
      CONSUL_HOST: consul
    restart: on-failure
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --ssl-keyfile /keys/server_key.pem --ssl-certfile /keys/server_cert.pem

  influxdb:
    image: influxdb
    container_name: influxdb
    ports:
      - "8086:8086"  # HTTPS
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: adminpassword
      DOCKER_INFLUXDB_INIT_ORG: your-org
      DOCKER_INFLUXDB_INIT_BUCKET: your-bucket
    volumes:
      - ./influxdb_data:/var/lib/influxdb2
      - ./keys:/keys
    command: >
      influxd
      --tls-cert=/keys/server_cert.pem
      --tls-key=/keys/server_key.pem

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    ports:
      - "8080:8080"
      - '${HAPROXY_STATS_PORT}:${HAPROXY_STATS_PORT}'
    volumes:
      - './haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg'
      - ./haproxy.cfg/503_error.html:/usr/local/etc/haproxy/503_error.html
      - './keys:/keys'
      - './logs:/var/log/haproxy' 
    depends_on:
      - grafana
      - loki
      - machine_a1
      - machine_a2
      - machine_b1
      - machine_b2
      - warehouse
      - orders
      - delivery
      - client
      - payment
      - log
      - rabbitmq
    env_file:
      - .env

  zeek:
    image: zeek/zeek:latest
    container_name: zeek
    network_mode: host  # Allows Zeek to capture traffic on the host network
    cap_add:
      - NET_RAW
      - NET_ADMIN
    volumes:
      - ./keys:/keys  # Mount the directory containing the keys
      - ./zeek_logs:/usr/local/zeek/logs  # Directory to store Zeek logs
      - ./zeek_configs:/usr/local/zeek/share/zeek/site
    working_dir: /usr/local/zeek/logs  # Path to custom scripts if needed
    environment:
      - ZEEK_INTERFACE=docker0
    command: ["zeek", "-i", "any"]
    restart: always
    depends_on:
    - haproxy

  python-bot:
    image: python:3.9-slim
    command: sh -c "pip3 install slowloris && pip install requests && python3 bening.py"
    volumes:
      - ./keys:/keys  # Mount keys directory if needed
      - ./bot:/scripts  # Optional: For Python scripts
    working_dir: /scripts  # Set working directory
    depends_on:
      - grafana
      - loki
      - haproxy
      - influxdb
    networks:
      - default
    restart: on-failure
    deploy:
      replicas: 5  # Scale the service to 10 containers
      restart_policy:
        condition: on-failure

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.10.0
    container_name: filebeat
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/var/log/haproxy:ro
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
      - haproxy
    restart: always

  elasticsearch:
    container_name: elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=admin
      - ELASTIC_USERNAME=elastic
    ports:
      - "9200:9200"

  kibana:
      image: kibana:7.17.27
      ports:
        - "5601:5601"
      depends_on:
        - elasticsearch
